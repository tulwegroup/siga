// SIGA-iGOV Oversight Intelligence Platform Database Schema
// State Interests and Governance Authority - Ghana

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Entity Management
model Entity {
  id              String @id @default(cuid())
  entityId        String @unique // e.g., "SOE-001"
  name            String
  category        EntityCategory
  sector          String
  parentMinistry  String
  status          EntityStatus @default(ACTIVE)
  contactEmail    String?
  contactPhone    String?
  address         String?
  website         String?
  description     String?
  establishedDate DateTime?
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())

  // Relations
  kpiData         KpiData[]
  boardMembers    BoardMember[]
  riskScores      RiskScore[]
  complianceLogs  ComplianceLog[]
  dividends       DividendRecord[]
  guarantees      GuaranteeRecord[]
  auditReports    AuditReport[]
  governanceDocs  GovernanceDocument[]
  financialReports FinancialReport[]
  itInfrastructure ITInfrastructure[]
  softwareLicenses SoftwareLicense[]
  procurementRecords ProcurementRecord[]

  @@map("entities")
}

enum EntityCategory {
  SOE // State-Owned Enterprise
  JVC // Joint Venture Company
  OSE // Other State Entity
}

enum EntityStatus {
  ACTIVE
  INACTIVE
  UNDER_RESTRUCTURING
  DISSOLVED
}

// Key Performance Indicators Data
model KpiData {
  id           String   @id @default(cuid())
  entityId     String
  period       String   // e.g., "2024-Q1", "2024-03"
  year         Int
  quarter      Int?
  month        Int?
  
  // Financial KPIs
  revenue      Float?
  profit       Float?
  assets       Float?
  liabilities  Float?
  equity       Float?
  roa          Float? // Return on Assets
  roe          Float? // Return on Equity
  debtToEquity Float?
  
  // Operational KPIs
  employeeCount Int?
  serviceDeliveryIndex Float?
  customerSatisfaction Float?
  
  // Compliance KPIs
  reportingCompliance Float?
  governanceScore     Float?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@unique([entityId, period])
  @@map("kpi_data")
}

// Board & Governance Management
model BoardMember {
  id           String   @id @default(cuid())
  entityId     String
  name         String
  position     String
  appointmentDate DateTime?
  termEndDate  DateTime?
  isChairperson Boolean  @default(false)
  email        String?
  phone        String?
  qualifications String?
  experience   String?
  conflicts    String? // Conflict of interest declarations
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("board_members")
}

// Risk Scoring Engine
model RiskScore {
  id             String   @id @default(cuid())
  entityId       String
  period         String
  overallScore   Float    // 0-100
  financialRisk  Float    // 0-100
  operationalRisk Float   // 0-100
  governanceRisk Float    // 0-100
  complianceRisk Float    // 0-100
  
  riskFactors    Json?    // Detailed risk factor breakdown
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@unique([entityId, period])
  @@map("risk_scores")
}

// Compliance Tracking
model ComplianceLog {
  id           String   @id @default(cuid())
  entityId     String
  requirement  String   // Compliance requirement description
  category     ComplianceCategory
  status       ComplianceStatus
  dueDate      DateTime
  completedDate DateTime?
  assignedTo   String?
  notes        String?
  evidence     String? // Link to evidence documents
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("compliance_logs")
}

enum ComplianceCategory {
  FINANCIAL_REPORTING
  GOVERNANCE
  OPERATIONAL
  LEGAL
  PROCUREMENT
  AUDIT
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PENDING
  OVERDUE
  EXEMPTED
}

// Dividend & Guarantee Tracking
model DividendRecord {
  id           String   @id @default(cuid())
  entityId     String
  year         Int
  amountDeclared Float?
  amountPaid   Float?
  dueDate      DateTime?
  paidDate     DateTime?
  status       DividendStatus @default(PENDING)
  notes        String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@unique([entityId, year])
  @@map("dividend_records")
}

enum DividendStatus {
  PENDING
  PAID
  WAIVED
  PARTIALLY_PAID
}

model GuaranteeRecord {
  id           String   @id @default(cuid())
  entityId     String
  guaranteeType String
  amount       Float
  currency     String @default("GHS")
  issuedDate   DateTime
  expiryDate   DateTime?
  status       GuaranteeStatus @default(ACTIVE)
  purpose      String?
  guarantor    String? // Usually Ministry of Finance
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("guarantee_records")
}

enum GuaranteeStatus {
  ACTIVE
  EXPIRED
  CALLED
  CANCELLED
}

// Audit Intelligence
model AuditReport {
  id           String   @id @default(cuid())
  entityId     String
  title        String
  reportType   AuditType
  period       String
  findings     Json?    // Structured audit findings
  recommendations Json?
  riskLevel    RiskLevel
  status       AuditStatus
  reportUrl    String?
  summary      String?
  
  auditDate    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("audit_reports")
}

enum AuditType {
  FINANCIAL
  PERFORMANCE
  COMPLIANCE
  FORENSIC
  SPECIAL
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  PUBLISHED
}

// Governance Documents
model GovernanceDocument {
  id           String   @id @default(cuid())
  entityId     String
  title        String
  documentType GovernanceDocType
  version      String
  effectiveDate DateTime
  expiryDate   DateTime?
  status       DocStatus @default(ACTIVE)
  fileUrl      String?
  summary      String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("governance_documents")
}

enum GovernanceDocType {
  CHARTER
  POLICY
  PROCEDURE
  MANUAL
  AGREEMENT
  CONTRACT
}

enum DocStatus {
  ACTIVE
  DRAFT
  ARCHIVED
  SUPERSEDED
}

// System Users (for SIGA staff)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(ANALYST)
  department String?
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  ANALYST
  AUDITOR
  MINISTER
  VIEWER
}

// Agent System Logs (for multi-agent coordination)
model AgentLog {
  id          String   @id @default(cuid())
  agentType   AgentType
  agentId     String
  action      String
  targetEntity String?
  data        Json?
  status      String
  timestamp   DateTime @default(now())
  duration    Int?     // Execution time in milliseconds
}

enum AgentType {
  INGESTION
  DATA_ARCHITECT
  DSL_BUILDER
  GOVERNANCE
  RISK_ANALYST
  PORTFOLIO
  TRANSPARENCY
  TRAINING
  AUDIT
  COORDINATOR
}

// Financial Reports (3-year historical data)
model FinancialReport {
  id               String   @id @default(cuid())
  entityId         String
  year             Int
  quarter          Int?
  reportType       FinancialReportType
  revenue          Float?
  expenses         Float?
  profit           Float?
  assets           Float?
  liabilities      Float?
  equity           Float?
  cashFlow         Float?
  capitalExpenditure Float?
  operatingMargin  Float?
  netMargin        Float?
  roa              Float?
  roe              Float?
  debtToEquity     Float?
  currentRatio     Float?
  
  // Additional financial metrics
  employeeCosts    Float?
  depreciation     Float?
  amortization     Float?
  interestExpense  Float?
  taxExpense       Float?
  dividendPaid     Float?
  retainedEarnings Float?
  
  reportUrl        String?
  auditor          String?
  auditOpinion     AuditOpinion?
  notes            String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@unique([entityId, year, quarter, reportType])
  @@map("financial_reports")
}

enum FinancialReportType {
  ANNUAL
  QUARTERLY
  INTERIM
  AUDITED
  UNAUDITED
}

enum AuditOpinion {
  UNQUALIFIED
  QUALIFIED
  ADVERSE
  DISCLAIMER
}

// IT Infrastructure Management
model ITInfrastructure {
  id               String   @id @default(cuid())
  entityId         String
  category         ITCategory
  name             String
  description      String?
  vendor           String?
  version          String?
  licenseKey       String?
  licenseExpiry    DateTime?
  annualCost       Float?
  currency         String   @default("GHS")
  
  // Infrastructure Details
  hasDataCenter    Boolean  @default(false)
  dataCenterLocation String?
  hasDisasterRecovery Boolean @default(false)
  drLocation       String?
  drProvider       String?
  cloudProvider    String?
  cloudRegion      String?
  
  // Technical Specifications
  serverCount      Int?
  storageCapacity  Float?   // in TB
  bandwidth        Float?   // in Mbps
  uptime           Float?   // percentage
  lastMaintenance  DateTime?
  nextMaintenance  DateTime?
  
  // Security & Compliance
  securityCertifications String? // e.g., "ISO 27001, PCI DSS"
  complianceStatus String?
  lastSecurityAudit DateTime?
  
  // Contact Information
  itManager        String?
  itContact        String?
  supportContract  String?
  supportExpiry    DateTime?
  
  status           InfrastructureStatus @default(ACTIVE)
  notes            String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("it_infrastructure")
}

enum ITCategory {
  ERP_SYSTEM
  CRM_SYSTEM
  HR_SYSTEM
  FINANCIAL_SYSTEM
  ACCOUNTING_SOFTWARE
  BI_PLATFORM
  DOCUMENT_MANAGEMENT
  EMAIL_SYSTEM
  NETWORK_INFRASTRUCTURE
  SECURITY_SOFTWARE
  DATABASE_SYSTEM
  CLOUD_SERVICES
  BACKUP_SYSTEM
  DISASTER_RECOVERY
  OTHER
}

enum InfrastructureStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  UNDER_MAINTENANCE
  END_OF_LIFE
}

// Software License Management
model SoftwareLicense {
  id               String   @id @default(cuid())
  entityId         String
  softwareName     String
  vendor           String
  licenseType      LicenseType
  licenseModel     LicenseModel
  totalLicenses    Int
  usedLicenses     Int
  annualCost       Float?
  currency         String   @default("GHS")
  purchaseDate     DateTime?
  expiryDate       DateTime?
  autoRenewal      Boolean  @default(false)
  
  // License Details
  licenseKey       String?
  supportLevel     String?
  maintenanceIncluded Boolean @default(false)
  
  // Usage Tracking
  department       String?
  costCenter       String?
  budgetCode       String?
  
  // Optimization Opportunities
  sharable         Boolean  @default(false)
  consolidationOpportunity Boolean @default(false)
  alternativeOptions String?
  
  status           LicenseStatus @default(ACTIVE)
  notes            String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("software_licenses")
}

enum LicenseType {
  COMMERCIAL
  OPEN_SOURCE
  FREEMIUM
  CUSTOM
  GOVERNMENT
  EDUCATIONAL
}

enum LicenseModel {
  PERPETUAL
  SUBSCRIPTION
  CONCURRENT
  NAMED_USER
  DEVICE_BASED
  PROCESSOR_BASED
  USAGE_BASED
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  TERMINATED
  RENEWAL_DUE
}

// Procurement Monitoring
model ProcurementRecord {
  id               String   @id @default(cuid())
  entityId         String
  procurementId    String   @unique
  title            String
  description      String?
  category         ProcurementCategory
  procurementType  ProcurementType
  value            Float
  currency         String   @default("GHS")
  
  // Timeline
  publishedDate    DateTime
  closingDate      DateTime
  awardDate        DateTime?
  contractStartDate DateTime?
  contractEndDate  DateTime?
  
  // Supplier Information
  supplier         String?
  supplierCountry  String?
  isLocalSupplier  Boolean  @default(false)
  
  // Evaluation
  bidsReceived     Int?
  evaluationCriteria String?
  negotiationSavings Float?
  
  // Risk & Compliance
  riskLevel        ProcurementRisk @default(LOW)
  complianceStatus String?
  approvalStatus   ApprovalStatus @default(PENDING)
  
  // Duplicate Detection
  similarItems     Json?    // AI-detected similar procurements
  consolidationOpportunity Boolean @default(false)
  potentialSavings Float?
  
  // Monitoring
  deliveryStatus   String?
  paymentStatus    String?
  performanceRating Int?     // 1-5
  
  contractUrl      String?
  tenderUrl        String?
  notes            String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("procurement_records")
}

enum ProcurementCategory {
  GOODS
  SERVICES
  WORKS
  CONSULTANCY
  IT_SOFTWARE
  IT_HARDWARE
  VEHICLES
  FURNITURE
  EQUIPMENT
  MAINTENANCE
  TRAINING
  INSURANCE
  UTILITIES
  OTHER
}

enum ProcurementType {
  OPEN_TENDER
  RESTRICTED_TENDER
  DIRECT_PROCUREMENT
  QUOTATION
  SOLE_SOURCE
  EMERGENCY
  FRAMEWORK_AGREEMENT
}

enum ProcurementRisk {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  CANCELLED
}